# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > version.json

docker-login: &docker-login
  # Login to DockerHub
  #
  # Nota bene: you'll need to define the following secrets environment vars
  # in CircleCI interface:
  #
  #   - DOCKER_HUB_USER
  #   - DOCKER_HUB_PASSWORD
  run:
    name: Login to DockerHub
    command: >
      test -n "$DOCKER_HUB_USER" &&
        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin ||
        echo "Docker Hub anonymous mode"

version: 2.1
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Make sure the changes don't add a "print" statement to the code base.
      # We should exclude the ".circleci" folder from the search as the very command that checks
      # the absence of "print" is including a "print(" itself.
      - run:
          name: enforce absence of print statements in code
          command: |
            ! git diff origin/main..HEAD -- . ':(exclude).circleci' | grep "print("
      - run:
          name: enforce absence of FIXME in code
          command: |
            ! git diff origin/main..HEAD -- . ':(exclude).circleci' | grep "FIXME"
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log --pretty=format:%s | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint requests
      - run:
          name: lint commit messages added to main
          command: |
            ~/.local/bin/gitlint --commits origin/main..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # Check that renovate configuration file is valid
  check-renovate-configuration:
    docker:
      - image: renovate/renovate
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Run renovate-config-validator command
          command: renovate-config-validator

  # ---- Docker jobs ----
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            MORK_IMAGE_BUILD_TARGET=production \
            MORK_IMAGE_TAG=${CIRCLE_SHA1} \
              make build
      - run:
          name: Check built image availability
          command: docker images "mork:${CIRCLE_SHA1}*"

  # ---- Backend jobs ----
  # Build backend development environment
  build:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[dev]
          working_directory: src/app
      - save_cache:
          paths:
            - ~/.local
          key: v1-dependencies-{{ .Revision }}

  lint:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun/src/app
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Revision }}
      - run:
          name: Lint code with black
          command: ~/.local/bin/black mork --check
      - run:
          name: Lint code with Ruff check
          command: ~/.local/bin/ruff check mork

  test:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          MORK_DB_HOST: localhost
          PYTHONPATH: /home/circleci/fun
      - image: cimg/postgres:12.14
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASS
        environment:
          POSTGRES_DB: mork-db
          POSTGRES_USER: fun
          POSTGRES_PASSWORD: pass
    working_directory: ~/fun/src/app
    steps:
      - checkout:
          path: ~/fun
      - attach_workspace:
          at: ~/fun
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Revision }}
      # Create test database
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client
      - run: whoami
      - run: |
          psql \
          -d "postgresql://fun@localhost/postgres" \
          -c "create database \"test-mork-db\";"
      - run:
          name: Run tests
          command: ~/.local/bin/pytest

  # ---- Email jobs ----
  build-mails:
    docker:
      - image: cimg/node:20.16.0
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun/src/mail
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v1-mail-dependencies-{{ .Revision }}
      # If the yarn.lock file is not up-to-date with the package.json file,
      # using the --frozen-lockfile should fail.
      - run:
          name: Install node dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Build mails
          command: yarn build
      - persist_to_workspace:
          root: ~/fun
          paths:
            - src/app/mork/templates
      - save_cache:
          paths:
            - ./node_modules
          key: v1-mail-dependencies-{{ .Revision }}

  # ---- Packaging jobs ----
  package:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun/src/app
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Revision }}
      - attach_workspace:
          at: ~/fun
      - run:
          name: Build python package
          command: python -m build
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/fun
          paths:
            - src/app/dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/fun/dist

  # Publishing to PyPI requires that:
  #   * you already registered to pypi.org
  #   * you have defined both the TWINE_USERNAME & TWINE_PASSWORD secret
  #     environment variables in CircleCI UI (with your PyPI credentials)
  pypi:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Restore built python packages
      - attach_workspace:
          at: ~/fun
      - run:
          name: List built packages
          command: ls src/app/dist/*
      - run:
          name: Install base requirements (twine)
          command: pip install --user .[ci]
          working_directory: src/app
      - run:
          name: Upload built packages to PyPI
          command: ~/.local/bin/twine upload dist/*
          working_directory: src/app

  # ---- DockerHub publication job ----
  hub:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build production image
          command: |
            MORK_IMAGE_BUILD_TARGET=production \
            MORK_IMAGE_TAG=${CIRCLE_SHA1} \
              make build
      - run:
          name: Check built image availability
          command: docker images "mork:${CIRCLE_SHA1}*"
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-ci)
      - run:
          name: Tag images
          command: |
            docker images fundocker/mork
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: main (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag mork:${CIRCLE_SHA1} fundocker/mork:${DOCKER_TAG}
            # Tag as "latest" for stable release git tags
            if [[ -n "$CIRCLE_TAG" ]] && [[ "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                docker tag mork:${CIRCLE_SHA1} fundocker/mork:latest
            fi
            docker images | grep -E "^fundocker/mork\s*(${DOCKER_TAG}.*|latest|main)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: main (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/mork:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]] && [[ "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              docker push fundocker/mork:latest
            fi

  # Publisk the Helm chart to DockerHub
  publish-helm:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      - *docker-login
      - run:
          name: Install helm
          environment:
            HELM_RELEASE: v3.16.2
          command: |
            curl -Lo "/tmp/helm.tar.gz" "https://get.helm.sh/helm-${HELM_RELEASE}-linux-amd64.tar.gz"
            curl -sL "/tmp/helm.tar.gz.sha256sum" "https://get.helm.sh/helm-${HELM_RELEASE}-linux-amd64.tar.gz.sha256sum" | \
              sed "s|helm-${HELM_RELEASE}-linux-amd64.tar.gz|/tmp/helm.tar.gz|" | \
              sha256sum --check
            tar -xf /tmp/helm.tar.gz --strip-components=1 -C ${HOME}/bin linux-amd64/helm
            chmod 755 "${HOME}/bin/helm"
      - run:
          name: Get Helm chart target version from git tag
          command: |
            echo "export HELM_TAG=$(echo ${CIRCLE_TAG} | sed 's|^helm/v\(.*\)|\1|')" >> "$BASH_ENV"
            # Display:
            # - HELM_TAG: 1.1.2 (Git tag helm/v1.1.2)
            echo "HELM_TAG: ${HELM_TAG} (Git ${CIRCLE_TAG})"
      - run:
          name: Package Mork Helm chart
          working_directory: src/helm
          command: |
            helm dependency build mork/
            helm package mork
            # Check that chart version matches the tag
            ls | grep mork-${HELM_TAG}.tgz
      - run:
          name: Upload built package to DockerHub
          working_directory: src/helm
          command: |
            helm push mork-${HELM_TAG}.tgz oci://registry-1.docker.io/openfuncharts

  # Make a new github release
  release:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - *docker-login
      - attach_workspace:
          at: ~/fun
      - run:
          name: Install gh CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
              sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
      - run:
          name: Define release reference
          command: |
            echo 'RELEASE=$(echo "${CIRCLE_TAG}")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Get release changes
          command: |
            tag="${RELEASE/v/}" ;
            sed -E -n "/^## \[${tag}\]/,/^##\ /{/^## \[${tag}\]/d ;/^##\ /d; p}" CHANGELOG.md > release.md
      - run:
          name: Create release on GitHub
          command: |
            gh config set prompt disabled
            if ! gh release list | grep "${RELEASE}"; then
              gh release create -F release.md -t "${RELEASE/v/}" "${RELEASE}";
            fi
workflows:

  mork:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /.*/
      # Check Renovate
      - check-renovate-configuration:
          filters:
            tags:
              only: /.*/
      # Build mails
      - build-mails:
          filters:
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build images
      - build-docker:
          filters:
            tags:
              only: /.*/

      # Backend jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build:
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
            - build-mails
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package:
          requires:
            - lint
            - test
          filters:
            tags:
              only: /.*/

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed
      # and it has been tagged with a tag starting with the letter v or is on
      # the main branch
      - hub:
          requires:
            - build-docker
          filters:
            branches:
              only: main
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

      # PyPI publication.
      #
      # Publish python package to PYPI only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - pypi:
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

      # Publish Mork Helm chart to DockerHub
      - publish-helm:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^helm\/v[0-9]+\.[0-9]+\.[0-9]+$/

      # Release
      - release:
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
